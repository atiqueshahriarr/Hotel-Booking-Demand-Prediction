# -*- coding: utf-8 -*-
"""Hotel Booking Demand Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zNSCc4-VPbs43LC01VKxVkU4hE1ovaCC

# Hotel Reservations DataSet
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np

hotel= pd.read_csv("/content/drive/MyDrive/Colab Notebooks/Dataset 2/Hotel Reservations.csv")
hotel

"""# Null Value Handling"""

hotel.isnull().sum()

"""# Label Encoding"""

hotel=hotel.drop('Booking_ID', axis=1)

hotel.info()

from sklearn.preprocessing import LabelEncoder
lb=LabelEncoder()

hotel['type_of_meal_plan'] = lb.fit_transform(hotel['type_of_meal_plan'])
hotel['room_type_reserved']= lb.fit_transform(hotel['room_type_reserved'])
hotel['market_segment_type']= lb.fit_transform(hotel['market_segment_type'])
hotel['booking_status']=lb.fit_transform(hotel['booking_status'])

hotel.info()

"""# Feature Selection"""

x= hotel.drop('booking_status', axis=1)
y= hotel['booking_status']

y

"""# Train Test Split"""

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test=train_test_split(x,y, test_size=0.2)

"""# Logistic Regression"""

from sklearn.linear_model import LogisticRegression
lgrg= LogisticRegression()

lgrg.fit(x_train, y_train)
lgrg.score(x_train, y_train)*100

lgrg.score(x_test, y_test)*100

from sklearn.metrics import accuracy_score
y_pred_train_lgrg = lgrg.predict(x_train)
train_accuracy_lgrg= accuracy_score(y_pred_train_lgrg, y_train)
train_accuracy_lgrg*100

from sklearn.metrics import accuracy_score
y_pred_test_lgrg = lgrg.predict(x_test)
test_accuracy_lgrg= accuracy_score(y_pred_test_lgrg, y_test)
test_accuracy_lgrg*100

from sklearn.metrics import classification_report
print(classification_report(y_test, y_pred_test_lgrg))

"""# Decision Tree Classifier"""

from sklearn.tree import DecisionTreeClassifier
dtc=DecisionTreeClassifier()

dtc.fit(x_train, y_train)

dtc.score(x_train, y_train)*100

dtc.score(x_test, y_test)*100

from sklearn.metrics import accuracy_score

y_pred_train_dtc=dtc.predict(x_train)
train_accuracy_dtc=accuracy_score(y_pred_train_dtc, y_train)
train_accuracy_dtc*100

y_pred_test_dtc=dtc.predict(x_test)
test_accuracy_dtc=accuracy_score(y_pred_test_dtc, y_test)
test_accuracy_dtc*100

from sklearn.metrics import classification_report
print(classification_report(y_test, y_pred_test_dtc))

"""# Random Forest Classifier"""

from sklearn.ensemble import RandomForestClassifier
rfc= RandomForestClassifier()

rfc.fit(x_train, y_train)
rfc.score(x_train, y_train)*100

rfc.score(x_test, y_test)*100

from sklearn.metrics import accuracy_score

y_pred_train_rfc=rfc.predict(x_train)
train_accuracy_rfc=accuracy_score(y_pred_train_rfc, y_train)
train_accuracy_rfc*100

y_pred_test_rfc=rfc.predict(x_test)
test_accuracy_rfc=accuracy_score(y_pred_test_rfc, y_test)
test_accuracy_rfc*100

from sklearn.metrics import classification_report
print(classification_report(y_test, y_pred_test_rfc))

"""# Kneighbors Classifier"""

from sklearn.neighbors import KNeighborsClassifier
knc= KNeighborsClassifier(n_neighbors=10)

knc.fit(x_train, y_train)
knc.score(x_train, y_train)*100

knc.score(x_test, y_test)*100